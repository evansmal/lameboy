#pragma once

#include "decoder.hpp"
#include <map>

enum OpCode {
    NOP = 0x0,
    LD_BC_U16 = 0x1,
    LD_VBC_A = 0x2,
    INC_BC = 0x3,
    INC_B = 0x4,
    DEC_B = 0x5,
    LD_B_U8 = 0x6,
    RLCA = 0x7,
    LD_VU16_SP = 0x8,
    ADD_HL_BC = 0x9,
    LD_A_VBC = 0xa,
    DEC_BC = 0xb,
    INC_C = 0xc,
    DEC_C = 0xd,
    LD_C_U8 = 0xe,
    RRCA = 0xf,
    STOP = 0x10,
    LD_DE_U16 = 0x11,
    LD_VDE_A = 0x12,
    INC_DE = 0x13,
    INC_D = 0x14,
    DEC_D = 0x15,
    LD_D_U8 = 0x16,
    RLA = 0x17,
    JR_I8 = 0x18,
    ADD_HL_DE = 0x19,
    LD_A_VDE = 0x1a,
    DEC_DE = 0x1b,
    INC_E = 0x1c,
    DEC_E = 0x1d,
    LD_E_U8 = 0x1e,
    RRA = 0x1f,
    JR_NZ_I8 = 0x20,
    LD_HL_U16 = 0x21,
    LD_VHLPLUS_A = 0x22,
    INC_HL = 0x23,
    INC_H = 0x24,
    DEC_H = 0x25,
    LD_H_U8 = 0x26,
    DAA = 0x27,
    JR_Z_I8 = 0x28,
    ADD_HL_HL = 0x29,
    LD_A_VHLPLUS = 0x2a,
    DEC_HL = 0x2b,
    INC_L = 0x2c,
    DEC_L = 0x2d,
    LD_L_U8 = 0x2e,
    CPL = 0x2f,
    JR_NC_I8 = 0x30,
    LD_SP_U16 = 0x31,
    LD_VHLX_A = 0x32,
    INC_SP = 0x33,
    INC_VHL = 0x34,
    DEC_VHL = 0x35,
    LD_VHL_U8 = 0x36,
    SCF = 0x37,
    JR_C_I8 = 0x38,
    ADD_HL_SP = 0x39,
    LD_A_VHLX = 0x3a,
    DEC_SP = 0x3b,
    INC_A = 0x3c,
    DEC_A = 0x3d,
    LD_A_U8 = 0x3e,
    CCF = 0x3f,
    LD_B_B = 0x40,
    LD_B_C = 0x41,
    LD_B_D = 0x42,
    LD_B_E = 0x43,
    LD_B_H = 0x44,
    LD_B_L = 0x45,
    LD_B_VHL = 0x46,
    LD_B_A = 0x47,
    LD_C_B = 0x48,
    LD_C_C = 0x49,
    LD_C_D = 0x4a,
    LD_C_E = 0x4b,
    LD_C_H = 0x4c,
    LD_C_L = 0x4d,
    LD_C_VHL = 0x4e,
    LD_C_A = 0x4f,
    LD_D_B = 0x50,
    LD_D_C = 0x51,
    LD_D_D = 0x52,
    LD_D_E = 0x53,
    LD_D_H = 0x54,
    LD_D_L = 0x55,
    LD_D_VHL = 0x56,
    LD_D_A = 0x57,
    LD_E_B = 0x58,
    LD_E_C = 0x59,
    LD_E_D = 0x5a,
    LD_E_E = 0x5b,
    LD_E_H = 0x5c,
    LD_E_L = 0x5d,
    LD_E_VHL = 0x5e,
    LD_E_A = 0x5f,
    LD_H_B = 0x60,
    LD_H_C = 0x61,
    LD_H_D = 0x62,
    LD_H_E = 0x63,
    LD_H_H = 0x64,
    LD_H_L = 0x65,
    LD_H_VHL = 0x66,
    LD_H_A = 0x67,
    LD_L_B = 0x68,
    LD_L_C = 0x69,
    LD_L_D = 0x6a,
    LD_L_E = 0x6b,
    LD_L_H = 0x6c,
    LD_L_L = 0x6d,
    LD_L_VHL = 0x6e,
    LD_L_A = 0x6f,
    LD_VHL_B = 0x70,
    LD_VHL_C = 0x71,
    LD_VHL_D = 0x72,
    LD_VHL_E = 0x73,
    LD_VHL_H = 0x74,
    LD_VHL_L = 0x75,
    HALT = 0x76,
    LD_VHL_A = 0x77,
    LD_A_B = 0x78,
    LD_A_C = 0x79,
    LD_A_D = 0x7a,
    LD_A_E = 0x7b,
    LD_A_H = 0x7c,
    LD_A_L = 0x7d,
    LD_A_VHL = 0x7e,
    LD_A_A = 0x7f,
    ADD_A_B = 0x80,
    ADD_A_C = 0x81,
    ADD_A_D = 0x82,
    ADD_A_E = 0x83,
    ADD_A_H = 0x84,
    ADD_A_L = 0x85,
    ADD_A_VHL = 0x86,
    ADD_A_A = 0x87,
    ADC_A_B = 0x88,
    ADC_A_C = 0x89,
    ADC_A_D = 0x8a,
    ADC_A_E = 0x8b,
    ADC_A_H = 0x8c,
    ADC_A_L = 0x8d,
    ADC_A_VHL = 0x8e,
    ADC_A_A = 0x8f,
    SUB_A_B = 0x90,
    SUB_A_C = 0x91,
    SUB_A_D = 0x92,
    SUB_A_E = 0x93,
    SUB_A_H = 0x94,
    SUB_A_L = 0x95,
    SUB_A_VHL = 0x96,
    SUB_A_A = 0x97,
    SBC_A_B = 0x98,
    SBC_A_C = 0x99,
    SBC_A_D = 0x9a,
    SBC_A_E = 0x9b,
    SBC_A_H = 0x9c,
    SBC_A_L = 0x9d,
    SBC_A_VHL = 0x9e,
    SBC_A_A = 0x9f,
    AND_A_B = 0xa0,
    AND_A_C = 0xa1,
    AND_A_D = 0xa2,
    AND_A_E = 0xa3,
    AND_A_H = 0xa4,
    AND_A_L = 0xa5,
    AND_A_VHL = 0xa6,
    AND_A_A = 0xa7,
    XOR_A_B = 0xa8,
    XOR_A_C = 0xa9,
    XOR_A_D = 0xaa,
    XOR_A_E = 0xab,
    XOR_A_H = 0xac,
    XOR_A_L = 0xad,
    XOR_A_VHL = 0xae,
    XOR_A_A = 0xaf,
    OR_A_B = 0xb0,
    OR_A_C = 0xb1,
    OR_A_D = 0xb2,
    OR_A_E = 0xb3,
    OR_A_H = 0xb4,
    OR_A_L = 0xb5,
    OR_A_VHL = 0xb6,
    OR_A_A = 0xb7,
    CP_A_B = 0xb8,
    CP_A_C = 0xb9,
    CP_A_D = 0xba,
    CP_A_E = 0xbb,
    CP_A_H = 0xbc,
    CP_A_L = 0xbd,
    CP_A_VHL = 0xbe,
    CP_A_A = 0xbf,
    RET_NZ = 0xc0,
    POP_BC = 0xc1,
    JP_NZ_U16 = 0xc2,
    JP_U16 = 0xc3,
    CALL_NZ_U16 = 0xc4,
    PUSH_BC = 0xc5,
    ADD_A_U8 = 0xc6,
    RST_00H = 0xc7,
    RET_Z = 0xc8,
    RET = 0xc9,
    JP_Z_U16 = 0xca,
    PREFIX_CB = 0xcb,
    CALL_Z_U16 = 0xcc,
    CALL_U16 = 0xcd,
    ADC_A_U8 = 0xce,
    RST_08H = 0xcf,
    RET_NC = 0xd0,
    POP_DE = 0xd1,
    JP_NC_U16 = 0xd2,
    CALL_NC_U16 = 0xd4,
    PUSH_DE = 0xd5,
    SUB_A_U8 = 0xd6,
    RST_10H = 0xd7,
    RET_C = 0xd8,
    RETI = 0xd9,
    JP_C_U16 = 0xda,
    CALL_C_U16 = 0xdc,
    SBC_A_U8 = 0xde,
    RST_18H = 0xdf,
    LD_VFF00PLUSU8_A = 0xe0,
    POP_HL = 0xe1,
    LD_VFF00PLUSC_A = 0xe2,
    PUSH_HL = 0xe5,
    AND_A_U8 = 0xe6,
    RST_20H = 0xe7,
    ADD_SP_I8 = 0xe8,
    JP_HL = 0xe9,
    LD_VU16_A = 0xea,
    XOR_A_U8 = 0xee,
    RST_28H = 0xef,
    LD_A_VFF00PLUSU8 = 0xf0,
    POP_AF = 0xf1,
    LD_A_VFF00PLUSC = 0xf2,
    DI = 0xf3,
    PUSH_AF = 0xf5,
    OR_A_U8 = 0xf6,
    RST_30H = 0xf7,
    LD_HL_SPPLUSI8 = 0xf8,
    LD_SP_HL = 0xf9,
    LD_A_VU16 = 0xfa,
    EI = 0xfb,
    CP_A_U8 = 0xfe,
    RST_38H = 0xff,
};

#define ADD_DESCRIPTION(code, name, length, cycles) {{code}, { code, name, length, cycles }}

const std::map<Byte, InstructionDescription> INSTRUCTION_REGISTRY = {    ADD_DESCRIPTION(0x0, "NOP", 1, 4),
    ADD_DESCRIPTION(0x1, "LD BC,u16", 3, 12),
    ADD_DESCRIPTION(0x2, "LD (BC),A", 1, 8),
    ADD_DESCRIPTION(0x3, "INC BC", 1, 8),
    ADD_DESCRIPTION(0x4, "INC B", 1, 4),
    ADD_DESCRIPTION(0x5, "DEC B", 1, 4),
    ADD_DESCRIPTION(0x6, "LD B,u8", 2, 8),
    ADD_DESCRIPTION(0x7, "RLCA", 1, 4),
    ADD_DESCRIPTION(0x8, "LD (u16),SP", 3, 20),
    ADD_DESCRIPTION(0x9, "ADD HL,BC", 1, 8),
    ADD_DESCRIPTION(0xa, "LD A,(BC)", 1, 8),
    ADD_DESCRIPTION(0xb, "DEC BC", 1, 8),
    ADD_DESCRIPTION(0xc, "INC C", 1, 4),
    ADD_DESCRIPTION(0xd, "DEC C", 1, 4),
    ADD_DESCRIPTION(0xe, "LD C,u8", 2, 8),
    ADD_DESCRIPTION(0xf, "RRCA", 1, 4),
    ADD_DESCRIPTION(0x10, "STOP", 1, 4),
    ADD_DESCRIPTION(0x11, "LD DE,u16", 3, 12),
    ADD_DESCRIPTION(0x12, "LD (DE),A", 1, 8),
    ADD_DESCRIPTION(0x13, "INC DE", 1, 8),
    ADD_DESCRIPTION(0x14, "INC D", 1, 4),
    ADD_DESCRIPTION(0x15, "DEC D", 1, 4),
    ADD_DESCRIPTION(0x16, "LD D,u8", 2, 8),
    ADD_DESCRIPTION(0x17, "RLA", 1, 4),
    ADD_DESCRIPTION(0x18, "JR i8", 2, 12),
    ADD_DESCRIPTION(0x19, "ADD HL,DE", 1, 8),
    ADD_DESCRIPTION(0x1a, "LD A,(DE)", 1, 8),
    ADD_DESCRIPTION(0x1b, "DEC DE", 1, 8),
    ADD_DESCRIPTION(0x1c, "INC E", 1, 4),
    ADD_DESCRIPTION(0x1d, "DEC E", 1, 4),
    ADD_DESCRIPTION(0x1e, "LD E,u8", 2, 8),
    ADD_DESCRIPTION(0x1f, "RRA", 1, 4),
    ADD_DESCRIPTION(0x20, "JR NZ,i8", 2, 12),
    ADD_DESCRIPTION(0x21, "LD HL,u16", 3, 12),
    ADD_DESCRIPTION(0x22, "LD (HL+),A", 1, 8),
    ADD_DESCRIPTION(0x23, "INC HL", 1, 8),
    ADD_DESCRIPTION(0x24, "INC H", 1, 4),
    ADD_DESCRIPTION(0x25, "DEC H", 1, 4),
    ADD_DESCRIPTION(0x26, "LD H,u8", 2, 8),
    ADD_DESCRIPTION(0x27, "DAA", 1, 4),
    ADD_DESCRIPTION(0x28, "JR Z,i8", 2, 12),
    ADD_DESCRIPTION(0x29, "ADD HL,HL", 1, 8),
    ADD_DESCRIPTION(0x2a, "LD A,(HL+)", 1, 8),
    ADD_DESCRIPTION(0x2b, "DEC HL", 1, 8),
    ADD_DESCRIPTION(0x2c, "INC L", 1, 4),
    ADD_DESCRIPTION(0x2d, "DEC L", 1, 4),
    ADD_DESCRIPTION(0x2e, "LD L,u8", 2, 8),
    ADD_DESCRIPTION(0x2f, "CPL", 1, 4),
    ADD_DESCRIPTION(0x30, "JR NC,i8", 2, 12),
    ADD_DESCRIPTION(0x31, "LD SP,u16", 3, 12),
    ADD_DESCRIPTION(0x32, "LD (HL-),A", 1, 8),
    ADD_DESCRIPTION(0x33, "INC SP", 1, 8),
    ADD_DESCRIPTION(0x34, "INC (HL)", 1, 12),
    ADD_DESCRIPTION(0x35, "DEC (HL)", 1, 12),
    ADD_DESCRIPTION(0x36, "LD (HL),u8", 2, 12),
    ADD_DESCRIPTION(0x37, "SCF", 1, 4),
    ADD_DESCRIPTION(0x38, "JR C,i8", 2, 12),
    ADD_DESCRIPTION(0x39, "ADD HL,SP", 1, 8),
    ADD_DESCRIPTION(0x3a, "LD A,(HL-)", 1, 8),
    ADD_DESCRIPTION(0x3b, "DEC SP", 1, 8),
    ADD_DESCRIPTION(0x3c, "INC A", 1, 4),
    ADD_DESCRIPTION(0x3d, "DEC A", 1, 4),
    ADD_DESCRIPTION(0x3e, "LD A,u8", 2, 8),
    ADD_DESCRIPTION(0x3f, "CCF", 1, 4),
    ADD_DESCRIPTION(0x40, "LD B,B", 1, 4),
    ADD_DESCRIPTION(0x41, "LD B,C", 1, 4),
    ADD_DESCRIPTION(0x42, "LD B,D", 1, 4),
    ADD_DESCRIPTION(0x43, "LD B,E", 1, 4),
    ADD_DESCRIPTION(0x44, "LD B,H", 1, 4),
    ADD_DESCRIPTION(0x45, "LD B,L", 1, 4),
    ADD_DESCRIPTION(0x46, "LD B,(HL)", 1, 8),
    ADD_DESCRIPTION(0x47, "LD B,A", 1, 4),
    ADD_DESCRIPTION(0x48, "LD C,B", 1, 4),
    ADD_DESCRIPTION(0x49, "LD C,C", 1, 4),
    ADD_DESCRIPTION(0x4a, "LD C,D", 1, 4),
    ADD_DESCRIPTION(0x4b, "LD C,E", 1, 4),
    ADD_DESCRIPTION(0x4c, "LD C,H", 1, 4),
    ADD_DESCRIPTION(0x4d, "LD C,L", 1, 4),
    ADD_DESCRIPTION(0x4e, "LD C,(HL)", 1, 8),
    ADD_DESCRIPTION(0x4f, "LD C,A", 1, 4),
    ADD_DESCRIPTION(0x50, "LD D,B", 1, 4),
    ADD_DESCRIPTION(0x51, "LD D,C", 1, 4),
    ADD_DESCRIPTION(0x52, "LD D,D", 1, 4),
    ADD_DESCRIPTION(0x53, "LD D,E", 1, 4),
    ADD_DESCRIPTION(0x54, "LD D,H", 1, 4),
    ADD_DESCRIPTION(0x55, "LD D,L", 1, 4),
    ADD_DESCRIPTION(0x56, "LD D,(HL)", 1, 8),
    ADD_DESCRIPTION(0x57, "LD D,A", 1, 4),
    ADD_DESCRIPTION(0x58, "LD E,B", 1, 4),
    ADD_DESCRIPTION(0x59, "LD E,C", 1, 4),
    ADD_DESCRIPTION(0x5a, "LD E,D", 1, 4),
    ADD_DESCRIPTION(0x5b, "LD E,E", 1, 4),
    ADD_DESCRIPTION(0x5c, "LD E,H", 1, 4),
    ADD_DESCRIPTION(0x5d, "LD E,L", 1, 4),
    ADD_DESCRIPTION(0x5e, "LD E,(HL)", 1, 8),
    ADD_DESCRIPTION(0x5f, "LD E,A", 1, 4),
    ADD_DESCRIPTION(0x60, "LD H,B", 1, 4),
    ADD_DESCRIPTION(0x61, "LD H,C", 1, 4),
    ADD_DESCRIPTION(0x62, "LD H,D", 1, 4),
    ADD_DESCRIPTION(0x63, "LD H,E", 1, 4),
    ADD_DESCRIPTION(0x64, "LD H,H", 1, 4),
    ADD_DESCRIPTION(0x65, "LD H,L", 1, 4),
    ADD_DESCRIPTION(0x66, "LD H,(HL)", 1, 8),
    ADD_DESCRIPTION(0x67, "LD H,A", 1, 4),
    ADD_DESCRIPTION(0x68, "LD L,B", 1, 4),
    ADD_DESCRIPTION(0x69, "LD L,C", 1, 4),
    ADD_DESCRIPTION(0x6a, "LD L,D", 1, 4),
    ADD_DESCRIPTION(0x6b, "LD L,E", 1, 4),
    ADD_DESCRIPTION(0x6c, "LD L,H", 1, 4),
    ADD_DESCRIPTION(0x6d, "LD L,L", 1, 4),
    ADD_DESCRIPTION(0x6e, "LD L,(HL)", 1, 8),
    ADD_DESCRIPTION(0x6f, "LD L,A", 1, 4),
    ADD_DESCRIPTION(0x70, "LD (HL),B", 1, 8),
    ADD_DESCRIPTION(0x71, "LD (HL),C", 1, 8),
    ADD_DESCRIPTION(0x72, "LD (HL),D", 1, 8),
    ADD_DESCRIPTION(0x73, "LD (HL),E", 1, 8),
    ADD_DESCRIPTION(0x74, "LD (HL),H", 1, 8),
    ADD_DESCRIPTION(0x75, "LD (HL),L", 1, 8),
    ADD_DESCRIPTION(0x76, "HALT", 1, 4),
    ADD_DESCRIPTION(0x77, "LD (HL),A", 1, 8),
    ADD_DESCRIPTION(0x78, "LD A,B", 1, 4),
    ADD_DESCRIPTION(0x79, "LD A,C", 1, 4),
    ADD_DESCRIPTION(0x7a, "LD A,D", 1, 4),
    ADD_DESCRIPTION(0x7b, "LD A,E", 1, 4),
    ADD_DESCRIPTION(0x7c, "LD A,H", 1, 4),
    ADD_DESCRIPTION(0x7d, "LD A,L", 1, 4),
    ADD_DESCRIPTION(0x7e, "LD A,(HL)", 1, 8),
    ADD_DESCRIPTION(0x7f, "LD A,A", 1, 4),
    ADD_DESCRIPTION(0x80, "ADD A,B", 1, 4),
    ADD_DESCRIPTION(0x81, "ADD A,C", 1, 4),
    ADD_DESCRIPTION(0x82, "ADD A,D", 1, 4),
    ADD_DESCRIPTION(0x83, "ADD A,E", 1, 4),
    ADD_DESCRIPTION(0x84, "ADD A,H", 1, 4),
    ADD_DESCRIPTION(0x85, "ADD A,L", 1, 4),
    ADD_DESCRIPTION(0x86, "ADD A,(HL)", 1, 8),
    ADD_DESCRIPTION(0x87, "ADD A,A", 1, 4),
    ADD_DESCRIPTION(0x88, "ADC A,B", 1, 4),
    ADD_DESCRIPTION(0x89, "ADC A,C", 1, 4),
    ADD_DESCRIPTION(0x8a, "ADC A,D", 1, 4),
    ADD_DESCRIPTION(0x8b, "ADC A,E", 1, 4),
    ADD_DESCRIPTION(0x8c, "ADC A,H", 1, 4),
    ADD_DESCRIPTION(0x8d, "ADC A,L", 1, 4),
    ADD_DESCRIPTION(0x8e, "ADC A,(HL)", 1, 8),
    ADD_DESCRIPTION(0x8f, "ADC A,A", 1, 4),
    ADD_DESCRIPTION(0x90, "SUB A,B", 1, 4),
    ADD_DESCRIPTION(0x91, "SUB A,C", 1, 4),
    ADD_DESCRIPTION(0x92, "SUB A,D", 1, 4),
    ADD_DESCRIPTION(0x93, "SUB A,E", 1, 4),
    ADD_DESCRIPTION(0x94, "SUB A,H", 1, 4),
    ADD_DESCRIPTION(0x95, "SUB A,L", 1, 4),
    ADD_DESCRIPTION(0x96, "SUB A,(HL)", 1, 8),
    ADD_DESCRIPTION(0x97, "SUB A,A", 1, 4),
    ADD_DESCRIPTION(0x98, "SBC A,B", 1, 4),
    ADD_DESCRIPTION(0x99, "SBC A,C", 1, 4),
    ADD_DESCRIPTION(0x9a, "SBC A,D", 1, 4),
    ADD_DESCRIPTION(0x9b, "SBC A,E", 1, 4),
    ADD_DESCRIPTION(0x9c, "SBC A,H", 1, 4),
    ADD_DESCRIPTION(0x9d, "SBC A,L", 1, 4),
    ADD_DESCRIPTION(0x9e, "SBC A,(HL)", 1, 8),
    ADD_DESCRIPTION(0x9f, "SBC A,A", 1, 4),
    ADD_DESCRIPTION(0xa0, "AND A,B", 1, 4),
    ADD_DESCRIPTION(0xa1, "AND A,C", 1, 4),
    ADD_DESCRIPTION(0xa2, "AND A,D", 1, 4),
    ADD_DESCRIPTION(0xa3, "AND A,E", 1, 4),
    ADD_DESCRIPTION(0xa4, "AND A,H", 1, 4),
    ADD_DESCRIPTION(0xa5, "AND A,L", 1, 4),
    ADD_DESCRIPTION(0xa6, "AND A,(HL)", 1, 8),
    ADD_DESCRIPTION(0xa7, "AND A,A", 1, 4),
    ADD_DESCRIPTION(0xa8, "XOR A,B", 1, 4),
    ADD_DESCRIPTION(0xa9, "XOR A,C", 1, 4),
    ADD_DESCRIPTION(0xaa, "XOR A,D", 1, 4),
    ADD_DESCRIPTION(0xab, "XOR A,E", 1, 4),
    ADD_DESCRIPTION(0xac, "XOR A,H", 1, 4),
    ADD_DESCRIPTION(0xad, "XOR A,L", 1, 4),
    ADD_DESCRIPTION(0xae, "XOR A,(HL)", 1, 8),
    ADD_DESCRIPTION(0xaf, "XOR A,A", 1, 4),
    ADD_DESCRIPTION(0xb0, "OR A,B", 1, 4),
    ADD_DESCRIPTION(0xb1, "OR A,C", 1, 4),
    ADD_DESCRIPTION(0xb2, "OR A,D", 1, 4),
    ADD_DESCRIPTION(0xb3, "OR A,E", 1, 4),
    ADD_DESCRIPTION(0xb4, "OR A,H", 1, 4),
    ADD_DESCRIPTION(0xb5, "OR A,L", 1, 4),
    ADD_DESCRIPTION(0xb6, "OR A,(HL)", 1, 8),
    ADD_DESCRIPTION(0xb7, "OR A,A", 1, 4),
    ADD_DESCRIPTION(0xb8, "CP A,B", 1, 4),
    ADD_DESCRIPTION(0xb9, "CP A,C", 1, 4),
    ADD_DESCRIPTION(0xba, "CP A,D", 1, 4),
    ADD_DESCRIPTION(0xbb, "CP A,E", 1, 4),
    ADD_DESCRIPTION(0xbc, "CP A,H", 1, 4),
    ADD_DESCRIPTION(0xbd, "CP A,L", 1, 4),
    ADD_DESCRIPTION(0xbe, "CP A,(HL)", 1, 8),
    ADD_DESCRIPTION(0xbf, "CP A,A", 1, 4),
    ADD_DESCRIPTION(0xc0, "RET NZ", 1, 20),
    ADD_DESCRIPTION(0xc1, "POP BC", 1, 12),
    ADD_DESCRIPTION(0xc2, "JP NZ,u16", 3, 16),
    ADD_DESCRIPTION(0xc3, "JP u16", 3, 16),
    ADD_DESCRIPTION(0xc4, "CALL NZ,u16", 3, 24),
    ADD_DESCRIPTION(0xc5, "PUSH BC", 1, 16),
    ADD_DESCRIPTION(0xc6, "ADD A,u8", 2, 8),
    ADD_DESCRIPTION(0xc7, "RST 00h", 1, 16),
    ADD_DESCRIPTION(0xc8, "RET Z", 1, 20),
    ADD_DESCRIPTION(0xc9, "RET", 1, 16),
    ADD_DESCRIPTION(0xca, "JP Z,u16", 3, 16),
    ADD_DESCRIPTION(0xcb, "PREFIX CB", 1, 4),
    ADD_DESCRIPTION(0xcc, "CALL Z,u16", 3, 24),
    ADD_DESCRIPTION(0xcd, "CALL u16", 3, 24),
    ADD_DESCRIPTION(0xce, "ADC A,u8", 2, 8),
    ADD_DESCRIPTION(0xcf, "RST 08h", 1, 16),
    ADD_DESCRIPTION(0xd0, "RET NC", 1, 20),
    ADD_DESCRIPTION(0xd1, "POP DE", 1, 12),
    ADD_DESCRIPTION(0xd2, "JP NC,u16", 3, 16),
    ADD_DESCRIPTION(0xd3, "UNUSED", 1, 0),
    ADD_DESCRIPTION(0xd4, "CALL NC,u16", 3, 24),
    ADD_DESCRIPTION(0xd5, "PUSH DE", 1, 16),
    ADD_DESCRIPTION(0xd6, "SUB A,u8", 2, 8),
    ADD_DESCRIPTION(0xd7, "RST 10h", 1, 16),
    ADD_DESCRIPTION(0xd8, "RET C", 1, 20),
    ADD_DESCRIPTION(0xd9, "RETI", 1, 16),
    ADD_DESCRIPTION(0xda, "JP C,u16", 3, 16),
    ADD_DESCRIPTION(0xdb, "UNUSED", 1, 0),
    ADD_DESCRIPTION(0xdc, "CALL C,u16", 3, 24),
    ADD_DESCRIPTION(0xdd, "UNUSED", 1, 0),
    ADD_DESCRIPTION(0xde, "SBC A,u8", 2, 8),
    ADD_DESCRIPTION(0xdf, "RST 18h", 1, 16),
    ADD_DESCRIPTION(0xe0, "LD (FF00+u8),A", 2, 12),
    ADD_DESCRIPTION(0xe1, "POP HL", 1, 12),
    ADD_DESCRIPTION(0xe2, "LD (FF00+C),A", 1, 8),
    ADD_DESCRIPTION(0xe3, "UNUSED", 1, 0),
    ADD_DESCRIPTION(0xe4, "UNUSED", 1, 0),
    ADD_DESCRIPTION(0xe5, "PUSH HL", 1, 16),
    ADD_DESCRIPTION(0xe6, "AND A,u8", 2, 8),
    ADD_DESCRIPTION(0xe7, "RST 20h", 1, 16),
    ADD_DESCRIPTION(0xe8, "ADD SP,i8", 2, 16),
    ADD_DESCRIPTION(0xe9, "JP HL", 1, 4),
    ADD_DESCRIPTION(0xea, "LD (u16),A", 3, 16),
    ADD_DESCRIPTION(0xeb, "UNUSED", 1, 0),
    ADD_DESCRIPTION(0xec, "UNUSED", 1, 0),
    ADD_DESCRIPTION(0xed, "UNUSED", 1, 0),
    ADD_DESCRIPTION(0xee, "XOR A,u8", 2, 8),
    ADD_DESCRIPTION(0xef, "RST 28h", 1, 16),
    ADD_DESCRIPTION(0xf0, "LD A,(FF00+u8)", 2, 12),
    ADD_DESCRIPTION(0xf1, "POP AF", 1, 12),
    ADD_DESCRIPTION(0xf2, "LD A,(FF00+C)", 1, 8),
    ADD_DESCRIPTION(0xf3, "DI", 1, 4),
    ADD_DESCRIPTION(0xf4, "UNUSED", 1, 0),
    ADD_DESCRIPTION(0xf5, "PUSH AF", 1, 16),
    ADD_DESCRIPTION(0xf6, "OR A,u8", 2, 8),
    ADD_DESCRIPTION(0xf7, "RST 30h", 1, 16),
    ADD_DESCRIPTION(0xf8, "LD HL,SP+i8", 2, 12),
    ADD_DESCRIPTION(0xf9, "LD SP,HL", 1, 8),
    ADD_DESCRIPTION(0xfa, "LD A,(u16)", 3, 16),
    ADD_DESCRIPTION(0xfb, "EI", 1, 4),
    ADD_DESCRIPTION(0xfc, "UNUSED", 1, 0),
    ADD_DESCRIPTION(0xfd, "UNUSED", 1, 0),
    ADD_DESCRIPTION(0xfe, "CP A,u8", 2, 8),
    ADD_DESCRIPTION(0xff, "RST 38h", 1, 16),
};


